{"version":3,"file":"js/931.f258dcf1.js","mappings":"4MAAA,MAAMA,UAAsBC,MACxBC,KACAC,KACA,WAAAC,CAAYC,EAASH,EAAMC,GACvBG,MAAMD,GACNE,KAAKC,KAAO,gBACZD,KAAKL,KAAOA,EACZK,KAAKJ,KAAOA,CAChB,EAEJ,MAAMM,EAAO,IAAMC,OAAOC,QACpBC,EAAM,IAAMF,OAAOG,QACnBC,EAAS,6BAA6BL,SAAYG,IAClDG,EAAW,mBACXC,EAAS,mCACf,MAAMC,EACFC,SACAC,UAAW,EACX,WAAAf,CAAYc,GACRX,KAAKW,SAAWA,CACpB,CACA,0BAAME,GACF,aAAaC,MAAM,sBAAsBL,wBACpCM,MAAK,KACC,IAENC,OAAM,KACA,GAEf,CACA,OAAAC,CAAQC,GACJ,OAAO,IAAIC,SAAQC,MAAOC,EAASC,KAC/B,MAAMC,GAASvB,KAAKY,gBAAyBZ,KAAKa,uBAClD,IAAIW,EACAD,EACApB,OAAOsB,cAAc,IAAIC,YAAY,eAAgB,CACjDC,OAAQ,CAAEC,OAAQ,UAAWV,gBAIjCM,EAAMK,KAAK,GAAGrB,YAAoBR,KAAKW,SAAUJ,GAErD,MAAMuB,EAAOP,EAAS,mBAAqB,UAE3C,SAASQ,EAAeC,GACpB,IAAKT,GAAUS,EAAMC,SAAWzB,EAC5B,OACJ,MAAMZ,EAAOoC,EAAMpC,MAAQoC,EAAML,OAGjC,OAFI/B,EAAKsC,OACLC,QAAQC,IAAI,eAAgBxC,GACxBA,EAAKgC,QACT,IAAK,QACDJ,GAAKa,YAAY,CAAET,OAAQ,UAAWV,aAAa,KACnD,MACJ,IAAK,UACDf,OAAOmC,oBAAoBR,EAAMC,GACjCV,EAAQzB,EAAK2C,OACb,MACJ,IAAK,QACDpC,OAAOmC,oBAAoBR,EAAMC,GACjCT,EAAO,IAAI5B,MAAME,EAAKE,UACtB,MACJ,IAAK,QACDK,OAAOmC,oBAAoBR,EAAMC,GACjCT,EAAO,IAAI5B,MAAM,wBACjB,MAEZ,CAxBAS,OAAOqC,iBAAiBV,EAAMC,EAwB9B,GAER,CACA,QAAAU,CAASC,GACL,OAAO,IAAIvB,SAAQC,MAAOC,EAASC,KAC/B,MAAMC,GAASvB,KAAKY,gBAAyBZ,KAAKa,uBAClD,IAAIW,EACAD,EACApB,OAAOsB,cAAc,IAAIC,YAAY,eAAgB,CACjDC,OAAQ,CAAEC,OAAQ,OAAQc,WAI9BlB,EAAMK,KAAK,GAAGrB,SAAiBR,KAAKW,SAAUJ,GAElD,MAAMuB,EAAOP,EAAS,qBAAuB,UAE7C,SAASQ,EAAeC,GACpB,IAAKT,GAAUS,EAAMC,SAAWzB,EAC5B,OACJ,MAAMZ,EAAOoC,EAAMpC,MAAQoC,EAAML,OAGjC,OAFI/B,EAAKsC,OACLC,QAAQC,IAAI,eAAgBxC,GACxBA,EAAKgC,QACT,IAAK,QACDJ,GAAKa,YAAY,CAAET,OAAQ,OAAQc,KAAMA,GAAQ,KACjD,MACJ,IAAK,SACDvC,OAAOmC,oBAAoBR,EAAMC,GACjCV,EAAQzB,EAAK8C,MACb,MACJ,IAAK,QACDvC,OAAOmC,oBAAoBR,EAAMC,GACjCT,EAAO,IAAI7B,EAAcG,EAAKE,QAASF,EAAKD,MAAQ,OACpD,MACJ,IAAK,QACDQ,OAAOmC,oBAAoBR,EAAMC,GACjCT,EAAO,IAAI7B,EAAc,wBAAyB,OAClD,MAEZ,CAxBAU,OAAOqC,iBAAiBV,EAAMC,EAwB9B,GAER,E","sources":["webpack://vote-coin-demo/./node_modules/lute-connect/dist/main.esm.js"],"sourcesContent":["class SignTxnsError extends Error {\n    code;\n    data;\n    constructor(message, code, data) {\n        super(message);\n        this.name = \"SignTxnsError\";\n        this.code = code;\n        this.data = data;\n    }\n}\nconst left = 100 + window.screenX;\nconst top = 100 + window.screenY;\nconst PARAMS = `width=500,height=750,left=${left},top=${top}`;\nconst BASE_URL = \"https://lute.app\";\nconst EXT_ID = \"kiaoohollfkjhikdifohdckeidckokjh\";\nclass LuteConnect {\n    siteName;\n    forceWeb = false;\n    constructor(siteName) {\n        this.siteName = siteName;\n    }\n    async isExtensionInstalled() {\n        return await fetch(`chrome-extension://${EXT_ID}/assets/icon-16.png`)\n            .then(() => {\n            return true;\n        })\n            .catch(() => {\n            return false;\n        });\n    }\n    connect(genesisID) {\n        return new Promise(async (resolve, reject) => {\n            const useExt = this.forceWeb ? false : await this.isExtensionInstalled();\n            let win;\n            if (useExt) {\n                window.dispatchEvent(new CustomEvent(\"lute-connect\", {\n                    detail: { action: \"connect\", genesisID },\n                }));\n            }\n            else {\n                win = open(`${BASE_URL}/connect`, this.siteName, PARAMS);\n            }\n            const type = useExt ? \"connect-response\" : \"message\";\n            window.addEventListener(type, messageHandler);\n            function messageHandler(event) {\n                if (!useExt && event.origin !== BASE_URL)\n                    return;\n                const data = event.data || event.detail;\n                if (data.debug)\n                    console.log(\"[Lute Debug]\", data);\n                switch (data.action) {\n                    case \"ready\":\n                        win?.postMessage({ action: \"network\", genesisID }, \"*\");\n                        break;\n                    case \"connect\":\n                        window.removeEventListener(type, messageHandler);\n                        resolve(data.addrs);\n                        break;\n                    case \"error\":\n                        window.removeEventListener(type, messageHandler);\n                        reject(new Error(data.message));\n                        break;\n                    case \"close\":\n                        window.removeEventListener(type, messageHandler);\n                        reject(new Error(\"Operation Cancelled\"));\n                        break;\n                }\n            }\n        });\n    }\n    signTxns(txns) {\n        return new Promise(async (resolve, reject) => {\n            const useExt = this.forceWeb ? false : await this.isExtensionInstalled();\n            let win;\n            if (useExt) {\n                window.dispatchEvent(new CustomEvent(\"lute-connect\", {\n                    detail: { action: \"sign\", txns },\n                }));\n            }\n            else {\n                win = open(`${BASE_URL}/sign`, this.siteName, PARAMS);\n            }\n            const type = useExt ? \"sign-txns-response\" : \"message\";\n            window.addEventListener(type, messageHandler);\n            function messageHandler(event) {\n                if (!useExt && event.origin !== BASE_URL)\n                    return;\n                const data = event.data || event.detail;\n                if (data.debug)\n                    console.log(\"[Lute Debug]\", data);\n                switch (data.action) {\n                    case \"ready\":\n                        win?.postMessage({ action: \"sign\", txns: txns }, \"*\");\n                        break;\n                    case \"signed\":\n                        window.removeEventListener(type, messageHandler);\n                        resolve(data.txns);\n                        break;\n                    case \"error\":\n                        window.removeEventListener(type, messageHandler);\n                        reject(new SignTxnsError(data.message, data.code || 4300));\n                        break;\n                    case \"close\":\n                        window.removeEventListener(type, messageHandler);\n                        reject(new SignTxnsError(\"User Rejected Request\", 4100));\n                        break;\n                }\n            }\n        });\n    }\n}\n\nexport { SignTxnsError, LuteConnect as default };\n"],"names":["SignTxnsError","Error","code","data","constructor","message","super","this","name","left","window","screenX","top","screenY","PARAMS","BASE_URL","EXT_ID","LuteConnect","siteName","forceWeb","isExtensionInstalled","fetch","then","catch","connect","genesisID","Promise","async","resolve","reject","useExt","win","dispatchEvent","CustomEvent","detail","action","open","type","messageHandler","event","origin","debug","console","log","postMessage","removeEventListener","addrs","addEventListener","signTxns","txns"],"sourceRoot":""}